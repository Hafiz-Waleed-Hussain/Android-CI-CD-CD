buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        classpath 'io.fabric.tools:gradle:1.+'
    }
}
apply plugin: 'com.android.application'
//apply plugin: 'io.fabric'
// Kotlin related dependencies
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

apply plugin: 'jacoco'

android {
    compileSdkVersion 26
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "com.silence_shout"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    // Currently Added for Retro lambda
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {

        debug{
            testCoverageEnabled true
            debuggable true

        }


        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    testOptions {
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }

}

jacoco {
    toolVersion "0.7.1.201405082137"
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    androidTestImplementation ("com.android.support.test.espresso:espresso-intents:2.2.2",{
        exclude group: 'com.google.code.findbugs'
    })

    androidTestImplementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation 'com.android.support:appcompat-v7:26.0.2'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'

    // Retrofit 2 for API call's
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'

    // JSON Converter. Which I used with Retrofit.
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'

    // Rx Java 2. I used for callback in adapters + with retrofit.
    implementation 'io.reactivex.rxjava2:rxjava:2.0.2'

    // Rx Android mostly used for AndroidSchedulers.mainThread()
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'

    // Retrofit 2 work with Rx Java2. Only we need to add below adapter to make a connection
    // between these two libs
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    // This is very useful to show all the response from the API to Logcat.
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    // Dagger 2
    implementation 'com.google.dagger:dagger:2.11'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.11'

    // Dagger 2 with Kotlin
    kapt 'com.google.dagger:dagger-compiler:2.11'

    implementation 'com.github.bumptech.glide:glide:3.8.0'

    implementation 'com.android.support:recyclerview-v7:26.0.2'
    implementation 'com.android.support:cardview-v7:26.0.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jre7:1.1.3-2"

    implementation 'com.google.guava:guava:23.3-android'
    // Testing
    testImplementation 'junit:junit:4.12'
    testImplementation 'org.mockito:mockito-core:2.10.0'
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.4@aar') {
        transitive = true;
    }

}
repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}


project.afterEvaluate {
    // Grab all build types and product flavors
    def buildTypes = android.buildTypes.collect { type ->
        type.name
    }

    def productFlavors = android.productFlavors.collect { flavor ->
        flavor.name
    }
    // When no product flavors defined, use empty
    if (!productFlavors) productFlavors.add('')

    //iterate over the flavors

    productFlavors.each {

        productFlavorName ->
//iterate over build types like debug,release,prod etc.
            buildTypes.each {

                buildTypeName ->
                    //sourceNameâ€Šâ€” e.g. freeDebug ,sourcePathâ€Šâ€”â€Še.g. free/debug
                    def sourceName, sourcePath
                    if (!productFlavorName) {
                        sourceName = sourcePath = "${buildTypeName}"
                    } else {
                        sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                        sourcePath = "${productFlavorName}/${buildTypeName}"
                    }
                    // testTaskNameâ€Šâ€”â€Š e.g. testFreeDebugtest task that the coverage task depends on,
                    def testTaskName = "test${sourceName.capitalize()}UnitTest"
                    // Create coverage task of form 'testFlavorTypeCoverage' depending on 'testFlavorTypeUnitTest'
                    task "${testTaskName}Coverage"(type: JacocoReport, dependsOn: "$testTaskName") {
                        group = "Reporting"
                        description = "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."
                        classDirectories = fileTree(
                                dir: "${project.buildDir}/intermediates/classes/${sourcePath}",
                                excludes: [
                                        '**/R.class',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        'android/**/*.*',
                                        '**/Lambda$*.class', //Retrolambda
                                        '**/Lambda.class',
                                        '**/ * Lambda.class',
                                        '**/*Lambda*.class',
                                        '**/*Lambda*.*',
                                        '**/*Builder.*',
                                        '**/*_MembersInjector.class', //Dagger2 generated code
                                        '**/*_MembersInjector*.*', //Dagger2 generated code
                                        '**/ *_ * Factory*. * ', //Dagger2 generated code
                                        '**/*Component*.*', //Dagger2 generated code
                                        '**/*Module*.*', //Dagger2 generated code
                                        'io/**/*.*'
                                ],
                               // include: []
                        ) + fileTree(
                                dir:"${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                                excludes: [
                                        '**/R.class',
                                        '**/R$*.class',
                                        '**/*$ViewInjector*.*',
                                        '**/*$ViewBinder*.*',
                                        '**/BuildConfig.*',
                                        '**/Manifest*.*',
                                        'android/**/*.*',
                                        '**/Lambda$*.class', //Retrolambda
                                        '**/Lambda.class',
                                        '**/ * Lambda.class',
                                        '**/*Lambda*.class',
                                        '**/*Lambda*.*',
                                        '**/*Builder.*',
                                        '**/*_MembersInjector.class', //Dagger2 generated code
                                        '**/*_MembersInjector*.*', //Dagger2 generated code
                                        '**/ *_ * Factory*. * ', //Dagger2 generated code
                                        '**/*Component*.*', //Dagger2 generated code
                                        '**/*Module*.*', //Dagger2 generated code
                                        'io/**/*.*'
                                ],
                                // include: []
                        )


                        def coverageSourceDirs = [
                                "src/main/java",
                                "src/$productFlavorName/java",
                                "src/$buildTypeName/java"
                        ]
                        additionalSourceDirs = files(coverageSourceDirs)
                        sourceDirectories = files(coverageSourceDirs)
                        executionData = files("${project.buildDir}/jacoco/${testTaskName}.exec")
                        reports {
                            //enables and disable the type of file you need
                            xml.enabled = false
                            html.enabled = true
                        }
                    }
            }
    }
}
